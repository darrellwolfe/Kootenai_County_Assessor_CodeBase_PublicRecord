---
title: "Kootenai County (KC) Coding standards Quick Reference Library"
format: html
editor_options:
  markdown:
    wrap: 72
---

# The Kootenai County (KC) Coding standards Quick Reference Library (`!RefLibrary_KC_CodingStandards.qmd`)

The Kootenai County (KC) Coding Standards Quick Reference Library (!RefLibrary_KC_CodingStandards.qmd) is designed to streamline and unify the coding practices across the Kootenai County Assessor's Office. By adhering to these standardized guidelines, the team ensures that code is not only reusable but also easily maintainable, regardless of the developer.

This reference library serves as a comprehensive guide, providing clear examples and explanations of the preferred coding styles and practices. It is an essential resource for maintaining consistency and ensuring that all team members, whether working on SQL, Python, R, or other coding languages, can collaborate effectively.

## General Guidelines

In this section, you'll find the foundational coding standards that apply across all languages used in the office. These guidelines include naming conventions, file structure, and general best practices that promote clarity, readability, and consistency in our codebase.

## Language-Specific Standards

This section covers the specific coding standards for each programming language used in the office. It provides tailored guidelines to ensure that code in SQL, Python, R, and other languages follows the best practices unique to each language.

## SQL Standards

Here, you'll find the standards related to SQL queries and scripts. This includes preferred formatting, use of comments, naming conventions for tables and columns, and best practices for writing efficient and maintainable SQL code.

### SQL Stadards for common Tables and Columns

```{SQL eval=FALSE, include=TRUE} 

-- Table Aliases

TSBv_PARCELMASTER AS pm
    CTE_ParcelMaster AS pmd

-- Improvements
extensions AS e
improvements AS i
dwellings AS dw
comm_uses AS cu
comm_bldg AS cb
manuf_housing AS mh
allocations AS a
res_floor AS rf

    CTE_MH_SF AS mhsf
    CTE_Float_SF AS flsf
    CTE_BedBath AS bb

-- Values
valuation AS v
    CTE_CertValues AS cv

    CTE_MH_Float_Value AS mhval
    CTE_Other_Improve_Value AS otherval

-- Sales
transfer AS t
    CTE_DocCounts AS dc
    CTE_TransferSales AS tr

-- Memoes

memos AS m

    CTE_NotesSalesAnalysis AS nsa
    CTE_NotesConfidential AS nc



-- Column Aliases

pm.neighborhood AS GEO
TRIM(pm.NeighborHoodName) AS GEO_Name
TRIM(pm.pin) AS PIN
TRIM(pm.AIN) AS AIN
TRIM(pm.PropClassDescr) AS Property_Class_Description
--CASE Calculated Column AS Property_Class_Category
TRIM(pm.DisplayName) AS Owner
TRIM(pm.DisplayDescr) AS LegalDescription
TRIM(pm.SitusAddress) AS SitusAddress
TRIM(pm.SitusCity) AS SitusCity
TRIM(pm.SitusState) AS SitusState
TRIM(pm.SitusZip) AS SitusZip

```


### SQL Stadards for...

```{SQL eval=FALSE, include=TRUE} 

```


### SQL Stadards for...

```{SQL eval=FALSE, include=TRUE} 

```


## Python Standards

This subsection provides guidelines for writing Python code, including preferred imports, function and variable naming conventions, and coding practices that align with Pythonic principles.


```{python eval=FALSE, include=TRUE} 


```


## R Standards

The R standards include best practices for writing R scripts, data manipulation, and visualization, ensuring that R code is both efficient and readable.

```{r eval=FALSE, include=TRUE} 


```


## Integration and Collaboration

Finally, this section highlights the importance of integrating these coding standards across different projects and teams. It includes tips for collaboration, code review processes, and how to ensure that the coding standards are consistently applied across all projects.

TBC...



# CodeChuck Templates for Future Use

```{r eval=FALSE, include=TRUE} 


```

```{SQL eval=FALSE, include=TRUE} 

```

```{python eval=FALSE, include=TRUE} 


```
